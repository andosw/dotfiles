#!/usr/bin/env zsh
set -e

DOTHOME=$HOME/.dotfiles

function run() {
  ensure_git
  get_dotfiles
  link_dotfiles
  print_messages
}

# Directory to store backup
backup_dir="$DOTHOME/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

function ensure_git() {
  if [[ -z $commands[git] && "$OSTYPE" =~ ^darwin ]]; then
    if [[ -n $commands[brew] ]]; then
      e_header "Updating Homebrew..."
      brew update
      e_header "Installing Git..."
      brew install git
    fi
  fi

  # If Git isn't installed by now, something exploded. 
  if [[ -z $commands[git] ]]; then
    e_error "Git should be installed. It isn't. Aborting."
    exit 1
  fi
}

function get_dotfiles() {
  if [[ ! -d $DOTHOME ]]; then
    echo -n "Please enter your Github username: "
    read LOGIN

    e_header "Downloading dotfiles..."
    e_arrow git://github.com/${LOGIN}/dotfiles.git
    git clone --recursive git://github.com/${LOGIN}/dotfiles.git $DOTHOME

    if [[ ! -d $DOTHOME ]]; then
      e_error "Cannot fetch your dotfiles. Did you fork them?"
      exit 1
    fi
    
    sed -i.bak 's/git:\/\/\github.com\/\(.*\)dotfiles/git@github\.com\:\1dotfiles/' \
     $DOTHOME/.git/config

    cd $DOTHOME
  else
    e_header "Updating dotfiles..."
    cd $DOTHOME && git pull
    git submodule update --init --recursive --quiet
  fi
}

function link_dotfiles() {
  e_header "Linking files into home directory..."

  for file in $DOTHOME/link/.*; do
    local base="$(basename $file)"
    local dest="$HOME/$base"

    # Skip if link is the same.
    if [[ "$file" -ef "$dest" ]]; then
      e_success "$HOME/$base"
      continue
    fi

    # Back up file if it exists.
    if [[ -e "$dest" ]]; then
      e_arrow "Backing up $HOME/$base."
      inform_about_backup=1
      mkdir -p "$backup_dir"
      mv "$dest" "$backup_dir"
    fi

    ln -sf ${file#$HOME/} $HOME/
    e_success "$HOME/$base"
  done
}

function print_messages() {
  if [[ $inform_about_backup == 1 ]]; then
    echo -e "\nBackups were moved to $HOME/${backup_dir#$HOME/}\n"
  else
    echo # so it looks better ;)
  fi
}

run
