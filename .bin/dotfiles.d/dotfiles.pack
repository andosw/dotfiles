#!/usr/bin/env zsh

set -e

CURDIR="$(cd "$(dirname "$0")"; pwd -P)"
DOTHOME="$( cd "$( dirname "$0" )/../.." && pwd -P )"

dotfiles() {
  ensure_git
  get_dotfiles
  link_dotfiles
  run_init_scripts
  print_messages
}

# Directory to store backup
backup_dir="$DOTHOME/Backups/$(date "+%Y_%m_%d-%H_%M_%S")/"

# Logging stuff.
e_header()   { echo -e "\n\033[1m$@\033[0m"; }
e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

ensure_git() {
  if [[ -z $commands[git] && "$OSTYPE" =~ ^darwin ]]; then
    if [[ -n $commands[brew] ]]; then
      e_header "Installing Homebrew..."
      ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
    fi

    if [[ -n $commands[brew] ]]; then
      e_header "Updating Homebrew..."
      brew update
      e_header "Installing Git..."
      brew install git
    fi
  fi

  # If Git isn't installed by now, something exploded. 
  if [[ -z $commands[git] ]]; then
    e_error "Git should be installed. It isn't. Aborting."
    exit 1
  fi
}

get_dotfiles() {
  e_header "Updating dotfiles..."
  cd $DOTHOME && git pull
  git submodule update --init --recursive --quiet
}

link_dotfiles() {
  e_header "Linking files into home directory..."

  for file in $DOTHOME/Dotfiles/*; do
    local base="$(basename $file)"
    local dest="$HOME/.$base"

    # Skip if link is the same.
    if [[ "$file" -ef "$dest" ]]; then
      e_success $dest
      continue
    fi

    # Back up file if it exists.
    if [[ -e "$dest" ]]; then
      e_arrow "Backing up $HOME/$base."
      inform_about_backup=1
      mkdir -p "$backup_dir"
      mv "$dest" "$backup_dir"
    fi

    cd $HOME
    ln -sf ${file#$HOME/} ".$base"
    e_success $dest
  done
}

run_init_scripts() {
  e_header "Executing init scripts..."

  TRAPERR() {
    e_error $SOURCED_FILE
  }

  for file in $CURDIR/init/*.zsh; do
    SOURCED_FILE="$(basename $file)"
    source $file
    e_success $SOURCED_FILE
  done
}

print_messages() {
  if [[ $inform_about_backup == 1 ]]; then
    echo "\nBackups were moved to $HOME/${backup_dir#$HOME/}\n"
  fi

  if [[ $first_run == 1 ]]; then
    echo "\nInstallation complete! You can relogin now."
  else
    echo # it's visually better ;)
  fi
}

dotfiles
